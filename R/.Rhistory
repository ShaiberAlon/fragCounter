f
multicoco(cov, exome = T)
environment$f
environment()$f
n
n
n
environment()$f
x[,f]
Q
coco(cov)
n
n
n
environment()$f
x[,f]
x[,environment()$f]
x[,gc]
x[,f]
class(x)
environment()$f
x[,f]
tmp = as.data.table(x)
tmp
tmp[,f]
class(x)
Q
multicoco(cov, exome = T)
class(x)
Q
coco(cov)
tmp = as.data.frame(x)
x[,f]
tmp
tmp[,f]
head(tmp)
head(tmp[,gc])
environment()$f
n
n
n
tmp = as.data.frame(x)
head(tmp)
head(tmp[,f])
x = as.data.frame(x)
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
Q
coco(cov)
c
coco
coco(cov)
x
class(x)
Q
coco(cov)
coco(cov)
coco
coco(cov)
coco
test.out = fragCounter(samp, gc.rds.dir = '~/fragcounter/gcMAP/exome/', map.rds.dir = '~/fragcounter/gcMAP/exome/', exome = TRUE))
test.out = fragCounter(samp, gc.rds.dir = '~/fragcounter/gcMAP/exome/', map.rds.dir = '~/fragcounter/gcMAP/exome/', exome = TRUE)
n
n
cov
Q
test.out = fragCounter(samp, gc.rds.dir = '~/fragcounter/gcMAP/exome/', map.rds.dir = '~/fragcounter/gcMAP/exome/', exome = TRUE)
n
n
cov
Q
bam.cov.exome(samp)
n
n
n
n
n
n
n
n
n
n
n
n
n
counts
n
n
n
n
n
n
n
n
chunk
n
chunk.gr
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
gr.match(chunk.gr, exome)
tmp = gr.match(chunk.gr, exome)
tmp
c
c
PrepareCov(samp, exome = TRUE)
Q
PrepareCov(samp, exome = TRUE)
bam.cov.exome(samp)
n
seqlevels(chunk.gr)
seqlevels(exome)
bam.tile.cov
bam.cov.tile
chunk.gr
exome
Q
test.out = fragCounter(samp, gc.rds.dir = '~/fragcounter/gcMAP/exome/', map.rds.dir = '~/fragcounter/gcMAP/exome/', exome = TRUE)
n
n
Q
test.out = fragCounter(samp, gc.rds.dir = '~/fragcounter/gcMAP/exome/', map.rds.dir = '~/fragcounter/gcMAP/exome/', exome = TRUE)
n
n
cov
n
cov
n
cov
n
n
test.out
getwd()
setwd("~/git/fragCounter/")
document()
build()
install()
covr::package_coverage()
covr::package_coverage()
check()
document()
load_all()
test()
setwd('~/git/fragCounter/tests/testthat/')
correctcov_stub(cov.wig = cov21, gc.rds.dir = "gcMAP21", map.rds.dir = "gcMAP21")
correctcov_stub(cov.wig = cov21, gc.rds.dir = "gcMAP21", map.rds.dir = "gcMAP21")
correctcov_stub(cov.wig = cov21, gc.rds.dir = "gcMAP21", map.rds.dir = "gcMAP21")
n
n
n
n
cov
n
n
n
n
Q
correctcov_stub(cov.wig = cov21, gc.rds.dir = "gcMAP21", map.rds.dir = "gcMAP21")
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
correctcov_stub(cov.wig = cov21, gc.rds.dir = "gcMAP21", map.rds.dir = "gcMAP21")
document()
load_all()
test()
document()
load_all()
test()
library(fragCounter)
?PrepareCov
PrepareCov
document()
coco
library(fragCounter)
coco
getwd()
setwd('~/git/fragCounter/')
document()
coco
fragCounter
multicoco
coco
coco
document()
load_all()
coco
document()
library(fragCounter)
coco
ls()
rm(fragCounter)
document()
coco
document()
document()
document()
document()
document()
coco
build()
coco
fragCounter
coco
document()
fragCounter::coco
rm(coco)
coco
test.out = fragCounter(samp, gc.rds.dir = '~/fragcounter/gcMAP/exome/', map.rds.dir = '~/fragcounter/gcMAP/exome/', exome = TRUE, outdir = '~/fragcounter/exome')
document()
fragCounter
test.out = fragCounter(samp, gc.rds.dir = '~/fragcounter/gcMAP/exome/', map.rds.dir = '~/fragcounter/gcMAP/exome/', exome = TRUE, outdir = '~/fragcounter/exome')
test.out
test.out = fragCounter(samp, gc.rds.dir = '~/fragcounter/gcMAP/exome/', map.rds.dir = '~/fragcounter/gcMAP/exome/', exome = TRUE, outdir = '~/fragcounter/exome')
n
n
out.rds
imageroot
n
n
n
n
n
n
outrds
out.rds
n
out.corr
n
n
n
n
n
n
n
n
?export
document()
test.out = fragCounter(samp, gc.rds.dir = '~/fragcounter/gcMAP/exome/', map.rds.dir = '~/fragcounter/gcMAP/exome/', exome = TRUE, outdir = '~/fragcounter/exome')
n
n
n
n
n
n
n
n
n
n
n
export(cov.corr.out[, 'score'], out.corr, 'bigWig', dataFormat = 'variableStep')
n
n
Q
document()
test.out = fragCounter(samp, gc.rds.dir = '~/fragcounter/gcMAP/exome/', map.rds.dir = '~/fragcounter/gcMAP/exome/', exome = TRUE, outdir = '~/fragcounter/exome')
fit
fit$s
domain
yrange
df
imageroot
oudir
outdir
ls()
outdir = '~/fragcounter/exome'
imageroot
Q
document()
test.out = fragCounter(samp, gc.rds.dir = '~/fragcounter/gcMAP/exome/', map.rds.dir = '~/fragcounter/gcMAP/exome/', exome = TRUE, outdir = '~/fragcounter/exome')
n
n
n
n
n
n
n
n
x2s$reads
Q
test.out = fragCounter(samp, gc.rds.dir = '~/fragcounter/gcMAP/exome/', map.rds.dir = '~/fragcounter/gcMAP/exome/', exome = TRUE, outdir = '~/fragcounter/exome')
n
n
n
n
n
n
n
n
n
yrange
ls()
domain
yrange
yrange
Q
document()
coco
test.out = fragCounter(samp, gc.rds.dir = '~/fragcounter/gcMAP/exome/', map.rds.dir = '~/fragcounter/gcMAP/exome/', exome = TRUE, outdir = '~/fragcounter/exome')
n
domain
n
yrange
n
df
n
n
n
n
domain
yrange
n
n
n
n
n
n
n
n
n
n
cov = PrepareCov(samp, exome = TRUE)
cov
cov = correctcov_stub(cov, gc.rds.dir = '~/fragcounter/gcMAP/exome/', map.rds.dir = '~/fragcounter/gcMAP/exome/', exome = TRUE)
cov
document()
coco
    cov$reads.corrected = coco(cov, mc.cores = 1, fields = c('gc', 'map'), iterative = T, exome = TRUE, imageroot = imageroot)$reads.corrected
    cov$reads.corrected = coco(cov, mc.cores = 1, fields = c('gc', 'map'), iterative = T, exome = TRUE, imageroot = imageroot)$reads.corrected
environment()$f
fields
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
fit$s
n
n
n
n
Q
document()
    cov$reads.corrected = coco(cov, mc.cores = 1, fields = c('gc', 'map'), iterative = T, exome = TRUE, imageroot = imageroot)$reads.corrected
purge(frag.jb)
rm(frag.jb)
inputs(frag.jb)
run(frag.jb, quiet = FALSE)
bshe
read_gencode
document()
document()
run(frag.jb, quiet = FALSE)
purge(frag.jb)
rm(frag.jb)
document()
frag.jb
inputs(frag.jb)
more(err(frag.jb))
document()
document()
load_all()
fragCounter
purge(frag.jb)
rm(frag.jb)
outputs(frag.jb)
ls()
document()
build()
install()
fragCounter
purge(frag.jb)
rm(frag.jb)
outputs(frag.jb)
rm(frag.jb)
outputs(frag.jb)
rm(frag.jb)
rm(frag.jb)
outputs(frag.jb)
task(frag.jb)
rm(frag.jb)
lsh
task(frag.jb)
module(frag.jb)
outputs(frag.jb)
readRD('/gpfs/commons/home/twalradt/fragcounter/exome/fragCounter_TW/sample/cov.rds')
readRDS('/gpfs/commons/home/twalradt/fragcounter/exome/fragCounter_TW/sample/cov.rds')
inputs(frag.jb)
task(frag.jb)
outdir(frag.jb)
ls()
rm(frag.jb)
ls()
ls()
outdir(frag.jb)
task(frag.jb)
frag.tumor.tcga.wxs.jb[1]
n
bam.cov.tile
lsh
ls()
ls()
getwd()
check()
document()
document()
build()
install()
check()
document()
build()
install()
check()
document()
document()
check()
getwd()
rmarkdown::render("README.Rmd")
rmarkdown::render("README.Rmd")
rmarkdown::render()
getwd()
document()
build()
install()
check()
ls()
pairs
