tmp
c
c
PrepareCov(samp, exome = TRUE)
Q
PrepareCov(samp, exome = TRUE)
bam.cov.exome(samp)
n
seqlevels(chunk.gr)
seqlevels(exome)
bam.tile.cov
bam.cov.tile
chunk.gr
exome
Q
test.out = fragCounter(samp, gc.rds.dir = '~/fragcounter/gcMAP/exome/', map.rds.dir = '~/fragcounter/gcMAP/exome/', exome = TRUE)
n
n
Q
test.out = fragCounter(samp, gc.rds.dir = '~/fragcounter/gcMAP/exome/', map.rds.dir = '~/fragcounter/gcMAP/exome/', exome = TRUE)
n
n
cov
n
cov
n
cov
n
n
test.out
getwd()
setwd("~/git/fragCounter/")
document()
build()
install()
covr::package_coverage()
covr::package_coverage()
check()
document()
load_all()
test()
setwd('~/git/fragCounter/tests/testthat/')
correctcov_stub(cov.wig = cov21, gc.rds.dir = "gcMAP21", map.rds.dir = "gcMAP21")
correctcov_stub(cov.wig = cov21, gc.rds.dir = "gcMAP21", map.rds.dir = "gcMAP21")
correctcov_stub(cov.wig = cov21, gc.rds.dir = "gcMAP21", map.rds.dir = "gcMAP21")
n
n
n
n
cov
n
n
n
n
Q
correctcov_stub(cov.wig = cov21, gc.rds.dir = "gcMAP21", map.rds.dir = "gcMAP21")
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
correctcov_stub(cov.wig = cov21, gc.rds.dir = "gcMAP21", map.rds.dir = "gcMAP21")
document()
load_all()
test()
document()
load_all()
test()
library(fragCounter)
?PrepareCov
PrepareCov
document()
coco
library(fragCounter)
coco
getwd()
setwd('~/git/fragCounter/')
document()
coco
fragCounter
multicoco
coco
coco
document()
load_all()
coco
document()
library(fragCounter)
coco
ls()
rm(fragCounter)
document()
coco
document()
document()
document()
document()
document()
coco
build()
coco
fragCounter
coco
document()
fragCounter::coco
rm(coco)
coco
test.out = fragCounter(samp, gc.rds.dir = '~/fragcounter/gcMAP/exome/', map.rds.dir = '~/fragcounter/gcMAP/exome/', exome = TRUE, outdir = '~/fragcounter/exome')
document()
fragCounter
test.out = fragCounter(samp, gc.rds.dir = '~/fragcounter/gcMAP/exome/', map.rds.dir = '~/fragcounter/gcMAP/exome/', exome = TRUE, outdir = '~/fragcounter/exome')
test.out
test.out = fragCounter(samp, gc.rds.dir = '~/fragcounter/gcMAP/exome/', map.rds.dir = '~/fragcounter/gcMAP/exome/', exome = TRUE, outdir = '~/fragcounter/exome')
n
n
out.rds
imageroot
n
n
n
n
n
n
outrds
out.rds
n
out.corr
n
n
n
n
n
n
n
n
?export
document()
test.out = fragCounter(samp, gc.rds.dir = '~/fragcounter/gcMAP/exome/', map.rds.dir = '~/fragcounter/gcMAP/exome/', exome = TRUE, outdir = '~/fragcounter/exome')
n
n
n
n
n
n
n
n
n
n
n
export(cov.corr.out[, 'score'], out.corr, 'bigWig', dataFormat = 'variableStep')
n
n
Q
document()
test.out = fragCounter(samp, gc.rds.dir = '~/fragcounter/gcMAP/exome/', map.rds.dir = '~/fragcounter/gcMAP/exome/', exome = TRUE, outdir = '~/fragcounter/exome')
fit
fit$s
domain
yrange
df
imageroot
oudir
outdir
ls()
outdir = '~/fragcounter/exome'
imageroot
Q
document()
test.out = fragCounter(samp, gc.rds.dir = '~/fragcounter/gcMAP/exome/', map.rds.dir = '~/fragcounter/gcMAP/exome/', exome = TRUE, outdir = '~/fragcounter/exome')
n
n
n
n
n
n
n
n
x2s$reads
Q
test.out = fragCounter(samp, gc.rds.dir = '~/fragcounter/gcMAP/exome/', map.rds.dir = '~/fragcounter/gcMAP/exome/', exome = TRUE, outdir = '~/fragcounter/exome')
n
n
n
n
n
n
n
n
n
yrange
ls()
domain
yrange
yrange
Q
document()
coco
test.out = fragCounter(samp, gc.rds.dir = '~/fragcounter/gcMAP/exome/', map.rds.dir = '~/fragcounter/gcMAP/exome/', exome = TRUE, outdir = '~/fragcounter/exome')
n
domain
n
yrange
n
df
n
n
n
n
domain
yrange
n
n
n
n
n
n
n
n
n
n
cov = PrepareCov(samp, exome = TRUE)
cov
cov = correctcov_stub(cov, gc.rds.dir = '~/fragcounter/gcMAP/exome/', map.rds.dir = '~/fragcounter/gcMAP/exome/', exome = TRUE)
cov
document()
coco
    cov$reads.corrected = coco(cov, mc.cores = 1, fields = c('gc', 'map'), iterative = T, exome = TRUE, imageroot = imageroot)$reads.corrected
    cov$reads.corrected = coco(cov, mc.cores = 1, fields = c('gc', 'map'), iterative = T, exome = TRUE, imageroot = imageroot)$reads.corrected
environment()$f
fields
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
fit$s
n
n
n
n
Q
document()
    cov$reads.corrected = coco(cov, mc.cores = 1, fields = c('gc', 'map'), iterative = T, exome = TRUE, imageroot = imageroot)$reads.corrected
purge(frag.jb)
rm(frag.jb)
inputs(frag.jb)
run(frag.jb, quiet = FALSE)
bshe
read_gencode
document()
document()
run(frag.jb, quiet = FALSE)
purge(frag.jb)
rm(frag.jb)
document()
frag.jb
inputs(frag.jb)
more(err(frag.jb))
document()
document()
load_all()
fragCounter
purge(frag.jb)
rm(frag.jb)
outputs(frag.jb)
ls()
document()
build()
install()
fragCounter
purge(frag.jb)
rm(frag.jb)
outputs(frag.jb)
rm(frag.jb)
outputs(frag.jb)
rm(frag.jb)
rm(frag.jb)
outputs(frag.jb)
task(frag.jb)
rm(frag.jb)
lsh
task(frag.jb)
module(frag.jb)
outputs(frag.jb)
readRD('/gpfs/commons/home/twalradt/fragcounter/exome/fragCounter_TW/sample/cov.rds')
readRDS('/gpfs/commons/home/twalradt/fragcounter/exome/fragCounter_TW/sample/cov.rds')
inputs(frag.jb)
task(frag.jb)
outdir(frag.jb)
ls()
rm(frag.jb)
ls()
ls()
outdir(frag.jb)
task(frag.jb)
frag.tumor.tcga.wxs.jb[1]
n
bam.cov.tile
lsh
ls()
ls()
getwd()
check()
document()
document()
build()
install()
check()
document()
build()
install()
check()
document()
document()
check()
getwd()
rmarkdown::render("README.Rmd")
rmarkdown::render("README.Rmd")
rmarkdown::render()
getwd()
document()
build()
install()
check()
ls()
pairs
library(Flow)
library(skitools)
pairs
Flow::update(frag.tumor.tcga.wxs.jb[1])
Flow::update(frag.tumor.tcga.wxs.jb, mc.cores = 30))
Flow::update(frag.tumor.tcga.wxs.jb, mc.cores = 30)
Flow::update(frag.tumor.tcga.wxs.jb, mc.cores = 50)
Flow::update(frag.tumor.tcga.wxs.jb, mc.cores = 15)
outputs(frag.tumor.tcga.wxs.jb)['running and some outputs present']
outputs(frag.tumor.tcga.wxs.jb)['completed']
outputs(frag.tumor.tcga.wxs.jb)[1]
outputs(frag.tumor.tcga.wxs.jb)[1555]
outputs(frag.tumor.tcga.wxs.jb['completed'])[1]
outputs(frag.tumor.tcga.wxs.jb['running and some outputs present'])[1]
outdir(frag.tumor.tcga.wxs.jb['running and some outputs present'])[1]
ls9)
ls()
tmp = readRDS("/gpfs/commons/groups/imielinski_lab/projects/dryclean/TCGA_WXS/TW_TCGA_frag_tmp/fragCounter_TW/1825_3/cov.rds")
tmp
frag.tumor.tcga.wxs.jb
ls()
pairs
names(pairs)
head(outputs(frag.tumor.tcga.wxs.jb))
pairs
pwd
getwd()
document()
load_all()
build()
library(fragcounter)
pwd()
library(fragCounter)
multicoco
coco
pairs
Flow::update(frag.tumor.tcga.wxs.jb[1])
Flow::update(frag.tumor.tcga.wxs.jb[1])
Flow::update(frag.tumor.tcga.wxs.jb[1])
outputs(frag.tumor.tcga.wxs.jb[1])
outdir(frag.tumor.tcga.wxs.jb[1])
task(frag.tumor.tcga.wxs.jb)
document()
load_all()
build()
soure()
library(fragCounter)
coco
document()
load_all()
library(fragCounter)
fragCounter
purge(frag.tumor.tcga.wxs.jb[1])
Flow::update(frag.tumor.tcga.wxs.jb[1])
run(frag.tumor.tcga.wxs.jb[1], quiet = F)
purge(frag.tumor.tcga.wxs.jb[1])
run(frag.tumor.tcga.wxs.jb[1], quiet = F)
purge(frag.tumor.tcga.wxs.jb[1])
run(frag.tumor.tcga.wxs.jb[1], quiet = F)
document()
load_all()
fragCounter
purge(frag.tumor.tcga.wxs.jb[1])
run(frag.tumor.tcga.wxs.jb[1], quiet = F)
document()
load_all()
purge(frag.tumor.tcga.wxs.jb[1])
mem(frag.tumor.tcga.wxs.jb[1])
Flow::update(frag.tumor.tcga.wxs.jb[1])
qrun(frag.tumor.tcga.wxs.jb[1])
Flow::update(frag.tumor.tcga.wxs.jb[1])
Flow::update(frag.tumor.tcga.wxs.jb[1])
outputs(frag.tumor.tcga.wxs.jb[1])
outdir(frag.tumor.tcga.wxs.jb[1])
qrun(frag.tumor.tcga.wxs.jb)
Flow::update(frag.tumor.tcga.wxs.jb[1])
Flow::update(frag.tumor.tcga.wxs.jb)
Flow::update(frag.tumor.tcga.wxs.jb, mc.cores = 15)
pairs
pairs[, coverage_file := NULL]
pairs
pairs
pairs
names(pairs)
names(pairs)
Flow::update(frag.normal.tcga.wxs.jb, mc.cores = 15)
names(pairs.pon)
ls()
jb.wes
frag.normal.tcga.wxs.jb
Flow::update(frag.normal.tcga.wxs.jb,mc.cores = 20)
rm(bl)
gc()
ls()
Flow::update(frag.normal.tcga.wxs.jb,mc.cores = 20)
qrun(frag.tumor.tcga.wxs.jb['ready'])
qrun(frag.normal.tcga.wxs.jb['ready'])
Flow::update(frag.normal.tcga.wxs.jb)
Flow::update(frag.normal.tcga.wxs.jb, mc.cores = 20)
ls()
Flow::update(jb.wes, mc.cores = 30)
jb.wes
Flow::update(frag.normal.tcga.wxs.jb, mc.cores = 20)
ls()
pairs
setnames(pairs, "coverage_file", "tumor_coverage_file")
pairs
pairs
pairs
ls()
jb.wes
mem(jb.wes)[1]
qrun(jb.wes['ready'])
 ls()
frag.normal.tcga.wxs.jb[1]
input(frag.normal.tcga.wxs.jb[1])
inputs(frag.normal.tcga.wxs.jb[1])
outputsnputs(frag.normal.tcga.wxs.jb[1])
outputs(frag.normal.tcga.wxs.jb[1])
out
cov = PrepareCov(bam, skeleton, cov = NULL, midpoint = FALSE, window = 200, minmapq = 1, paired = TRUE, outdir, exome = TRUE)
cov = PrepareCov(bam, skeleton, cov = NULL, midpoint = FALSE, window = 200, minmapq = 1, paired = TRUE, exome = TRUE)
cov
skeleton
skel
skeleton
ls()
bl.skel
library(fragCounter)
PrepareCov
library(skitools)
PrepareCov
library(fragCounter)
sl = GenomeInfoDb::seqlengths(BamFile(bam))
library(bamUtils)
BamFile
sl
tiles
cov = bamUtils::bam.cov.gr(bam, intervals = tiles, isPaired = NA, isProperPair = NA, hasUnmappedMate = NA, chunksize = 1e7)
pairs.pon
ls()
rm(ls())
rm(c(ls()))
c(ls()
)
rm(list=ls())
ls()
pairs.pon
names(pairs.pon)
pairs.pon$seg.path
